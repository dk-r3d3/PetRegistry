# control_work

1. В подключенном MySQL репозитории создать базу данных “Друзья
человека”
_____________________________________________________________________
2. Создать таблицы с иерархией из диаграммы в БД
# РЕШЕНИЕ:
```
CREATE TABLE IF NOT EXISTS animal_class(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    class VARCHAR(20)

);
INSERT INTO animal_class (class)
VALUES 
('home_animals'),
('pack_animals');
CREATE TABLE cats(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    animal_class_id int REFERENCES animal_class(id),
    name VARCHAR(20),
    birthday DATE,
    commands VARCHAR(20)
);
CREATE TABLE dogs(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    animal_class_id int REFERENCES animal_class(id),
    name VARCHAR(20),
    birthday DATE,
    commands VARCHAR(20)
);
CREATE TABLE hamsters(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    animal_class_id int REFERENCES animal_class(id),
    name VARCHAR(20),
    birthday DATE,
    commands VARCHAR(20)
);
CREATE TABLE camels(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    animal_class_id int REFERENCES animal_class(id),
    name VARCHAR(20),
    birthday DATE,
    commands VARCHAR(20)
);
CREATE TABLE horses(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    animal_class_id int REFERENCES animal_class(id),
    name VARCHAR(20),
    birthday DATE,
    commands VARCHAR(20)
);
CREATE TABLE donkeys(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    animal_class_id int REFERENCES animal_class(id),
    name VARCHAR(20),
    birthday DATE,
    commands VARCHAR(20)
);
```
_____________________________________________________________________
3. Заполнить низкоуровневые таблицы именами(животных), командами
которые они выполняют и датами рождения
```
INSERT INTO cats (animal_class_id, name, birthday, commands)
VALUES
(1, 'Borya', '2021-11-30', 'Sit, Run'),
(1, 'Manya', '2020-08-31', 'Lie down');
INSERT INTO dogs (animal_class_id, name, birthday, commands)
VALUES
(1, 'Dick', '2021-05-17', 'Sit, Run, Lie down');
INSERT INTO hamsters (animal_class_id, name, birthday, commands)
VALUES
(1, 'Fup', '2024-03-22', 'Eat');
INSERT INTO horses (animal_class_id, name, birthday, commands)
VALUES
(2, 'Konymbua', '2024-01-01', 'Stand, Run'),
(2, 'Black_Eagle', '2022-09-12', 'stand, run');
INSERT INTO camels (animal_class_id, name, birthday, commands)
VALUES
(2, 'Egor', '2022-02-11', 'Stand'),
(2, 'Diezel', '2023-06-23', 'Run');
INSERT INTO donkeys (animal_class_id, name, birthday, commands)
VALUES
(2, 'IA_Sports', '2001-04-27', 'Stand'),
(2, 'Vanya', '2024-07-23', 'Sit, Run');
```
_____________________________________________________________________
4. Удалив из таблицы верблюдов, т.к. верблюдов решили перевезти в другой
питомник на зимовку. Объединить таблицы лошади, и ослы в одну таблицу.
```
DROP TABLE camels;
CREATE TABLE horses_and_donkeys
(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) AS
SELECT animal_class_id, name, birthday, commands FROM horses UNION
SELECT animal_class_id, name, birthday, commands FROM donkeys
GROUP BY id;
DROP TABLE horses;
DROP TABLE donkeys;
```
_____________________________________________________________________
5. Создать новую таблицу “молодые животные” в которую попадут все
животные старше 1 года, но младше 3 лет и в отдельном столбце с точностью
до месяца подсчитать возраст животных в новой таблице
```
CREATE TABLE young_animals
(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) AS
SELECT animal_class_id, name, birthday, commands, timestampdiff(MONTH, birthday, curdate()) as age FROM horses_and_donkeys  
WHERE timestampdiff(year, birthday, curdate()) BETWEEN 1 and 3 UNION
SELECT animal_class_id, name, birthday, commands, timestampdiff(MONTH, birthday, curdate()) as age FROM cats 
WHERE timestampdiff(year, birthday, curdate()) BETWEEN 1 and 3 UNION
SELECT animal_class_id, name, birthday, commands, timestampdiff(MONTH, birthday, curdate()) as age FROM dogs 
WHERE timestampdiff(year, birthday, curdate()) BETWEEN 1 and 3 UNION
SELECT animal_class_id, name, birthday, commands, timestampdiff(MONTH, birthday, curdate()) as age FROM hamsters
WHERE timestampdiff(year, birthday, curdate()) BETWEEN 1 and 3;
```
_____________________________________________________________________
6. Объединить все таблицы в одну, при этом сохраняя поля, указывающие на
прошлую принадлежность к старым таблицам.
```
SELECT * from animal_class
LEFT JOIN cats on animal_class.id = cats.id
LEFT JOIN dogs on animal_class.id = dogs.id
LEFT JOIN hamsters on animal_class.id = hamsters.id
RIGHT JOIN horses_and_donkeys on animal_class.id = horses_and_donkeys.id
RIGHT JOIN young_animals on animal_class.id = young_animals.id;
```

